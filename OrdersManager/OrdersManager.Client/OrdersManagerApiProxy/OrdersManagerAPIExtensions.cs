// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OrdersManagerAPI.
    /// </summary>
    public static partial class OrdersManagerAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ApiOrdersGet(this IOrdersManagerAPI operations)
            {
                return operations.ApiOrdersGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOrdersGetAsync(this IOrdersManagerAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOrdersGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderDto'>
            /// </param>
            public static object ApiOrdersPost(this IOrdersManagerAPI operations, OrderDto orderDto = default(OrderDto))
            {
                return operations.ApiOrdersPostAsync(orderDto).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOrdersPostAsync(this IOrdersManagerAPI operations, OrderDto orderDto = default(OrderDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOrdersPostWithHttpMessagesAsync(orderDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object ApiOrdersByIdGet(this IOrdersManagerAPI operations, System.Guid id)
            {
                return operations.ApiOrdersByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOrdersByIdGetAsync(this IOrdersManagerAPI operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOrdersByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='orderItemDto'>
            /// </param>
            public static object ApiOrdersByOrderIdItemsPut(this IOrdersManagerAPI operations, System.Guid orderId, OrderItemDto orderItemDto = default(OrderItemDto))
            {
                return operations.ApiOrdersByOrderIdItemsPutAsync(orderId, orderItemDto).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='orderItemDto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOrdersByOrderIdItemsPutAsync(this IOrdersManagerAPI operations, System.Guid orderId, OrderItemDto orderItemDto = default(OrderItemDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOrdersByOrderIdItemsPutWithHttpMessagesAsync(orderId, orderItemDto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderId'>
            /// </param>
            public static string ApiOrdersByOrderIdItemsPatch(this IOrdersManagerAPI operations, System.Guid orderId)
            {
                return operations.ApiOrdersByOrderIdItemsPatchAsync(orderId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiOrdersByOrderIdItemsPatchAsync(this IOrdersManagerAPI operations, System.Guid orderId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOrdersByOrderIdItemsPatchWithHttpMessagesAsync(orderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='itemId'>
            /// </param>
            public static object ApiOrdersByOrderIdItemsByItemIdDelete(this IOrdersManagerAPI operations, System.Guid orderId, System.Guid itemId)
            {
                return operations.ApiOrdersByOrderIdItemsByItemIdDeleteAsync(orderId, itemId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='itemId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiOrdersByOrderIdItemsByItemIdDeleteAsync(this IOrdersManagerAPI operations, System.Guid orderId, System.Guid itemId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOrdersByOrderIdItemsByItemIdDeleteWithHttpMessagesAsync(orderId, itemId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderId'>
            /// </param>
            public static string ApiOrdersByOrderIdDelete(this IOrdersManagerAPI operations, System.Guid orderId)
            {
                return operations.ApiOrdersByOrderIdDeleteAsync(orderId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiOrdersByOrderIdDeleteAsync(this IOrdersManagerAPI operations, System.Guid orderId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiOrdersByOrderIdDeleteWithHttpMessagesAsync(orderId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
